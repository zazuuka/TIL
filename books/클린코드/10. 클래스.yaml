#코딩 #개발자 #노마드북클럽 #노개북
---
#TIL
종류: Today I Learned
날짜: 2022-03-10
metadata:
  book: Clean Code
  label:
    name: 클래스
    chapter: 10
---
#책에서 기억하고 싶은 내용
type: 요약
selector:
  label:
    book: Clean Code
    chapter: 10
introduction: 깨끗한 클래스를 다룬다.
subheadings:
  - 클래스 체계:
    extract:
      - 클래스를 정의 하는 표준 자바 관례에 따르면 ... 추상화 단계가 순차적으로 내려간다. ... 프로그램은 신문 기사처럼 읽힌다.
  - 클래스는 작아야 한다!:
    extract: 
      - 클래스는 작아야 한다. ... 클래스는 다른 척도를 사용한다. 클래스가 맡은 책임을 센다.
      - 클래스 이름은 해당 클래스 책임을 기술해야 한다. ... 간결한 이름이 떠오르지 않는다면 필경 클래스 책임이 너무 많아서다.
      단일 책임원칙(Single Responsibility Principle):
        - 단일 책임 원칙 ... 클래스는 책임, 즉 변경할 이유가 하나여야 한다는 의미다.
        - 큰 클래스 몇 개가 아니라 작은 클래스 여럿으로 이뤄진 시스템이 더 바람직하다.
      응집도(Cohesion):
        - 응집도가 높다는 말은 클래스에 속한 메서드와 변수가 서로 의존하며 논리적인 단위로 묶인다는 의미기 때문이다.
      응집도를 유지하면 작은 클래스 여럿이 나온다:        
        - 큰 함수를 작은 함수 여럿으로 나누기만 해도 클래스 수가 많아진다.
        - 이렇게 하면 클래스가 응집력을 잃는다. ... 클래스가 응집력을 잃는다면 쪼개라!
        - 그러면서 프로그램에 점점 더 체계가 잡히고 구조가 투명해진다.
      변경하기 쉬운 클래스:
        - 깨끗한 시스템은 클래스를 체계적으로 정리해 변경에 수반하는 위험을 낮춘다.
        - 각 클래스는 극도로 단순하다. 함수 하나를 수정했다고 다른 함수가 망가질 위험도 사실상 사라졌다. ... 클래스가 서로 분리되었기 때문이다.
      변경으로부터 격리:
        - 상세한 구현에 의존하는 클라이언트 클래스는 구현이 바뀌면 위험에 빠진다.
        - 그래서 우리는 인터페이스와 추상 클래스를 사용해 구현이 미치는 영향을 격리한다.
        - 이렇게 결합도를 최소로 줄이면 자연스럽게 또 다른 클래스 설계 원칙인 DIP(Dependency Inversion Principle)를 따르는 클래스가 나온다.
        - 본질적으로 DIP는 클래스가 상세한 구현이 아니라 추상화에 의존해야 한다는 원칙이다.