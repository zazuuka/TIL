#코딩 #개발자 #노마드북클럽 #노개북
---
#TIL
종류: Today I Learned
날짜: 2022-03-05
metadata:
  book: Clean Code
  label:
    name: 단위테스트
    chapter: 9
---
#책에서 기억하고 싶은 내용
type: 요약
selector:
  label:
    book: Clean Code
    chapter: 9
introduction: 
subheadings:
  - TDD 법칙 세 가지:
    extract:
      - TDD 법칙 세 가지:
        첫째 법칙: 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다.
        둘째 법칙: 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다.
        셋째 법칙: 현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다.
    comment: 현재까진 이해가 잘 안된다. TDD 방식의 개발 방법에서 단위 테스트의 역할과 실제 코드 간의 관계 정도..
  - 깨끗한 테스트 코드 유지하기:
    extract: 
      - 테스트 코드는 실제 코드 못지 않게 중요하다. ... 테스트 코드는 사고와 설계와 주의가 필요하다. 실제 코드 못지 않게 깨끗하게 짜야 한다.
      - 코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 바로 단위 테스트다.
      - 아키텍처가 아무리 유연하더라도, 설계를 아무리 잘 나눴더라도, 테스트 케이스가 없으면 개발자는 변경을 주저한다. 버그가 숨어들까 두렵기 때문이다.
    comment:
      - 나는 실제 코드도 테스트 코드도 TDD로 개발해본적이 없다. 그래서 공감은 못 하겠다. 
        그러나 실제 코드도 테스트 코드도 클린 코드로 작성해야 한다는건 공감할 수 있다.
        새 버전이 출시 될 때마다 기존 코드의 수정과 재사용을 담보로 코드를 불려나가기 때문이다. 
        생산성의 하락이 예상보다 크다면 이는 상당히 심각한 문제가 될 것이다.
  - 깨끗한 테스트 코드:
    extract:
      - 가독성
      - 테스트 코드는 본론에 돌입해 진짜 필요한 자료 유형과 함수만 사용한다.
    comment: |
      테스트 코드를 작성할 때도 이전의 원칙대로 작성한다. 
  - 테스트 당 assert 하나:
    extract:
      - 가장 좋은 규칙은 "개념 당 assert 문 수를 최소로 줄여라"와 "테스트 함수 하나는 개념 하나만 테스트하라"라 하겠다.
    comment: |
      테스트 당 assert 하나(결론이 하나)인 경우 코드를 이해하기 쉽고 빠르단 장점이 있다.
      이 경우 본문에선 Given-When-Then, 템플릿 메소드 패턴을 사용해 구현이 가능함을 보여준다. 
      하지만 이럴 경우 실제 코드보다 테스트 코드에 시간을 더 쏟게 되는 문제가 발생한다.
      따라서 저자는 최소한의 assert 문을 사용하되 테스트 함수 하나당 개념 하나만을 테스트 할 것을 제안한다.
    glossary:
      Given-When-Then: 
        link: https://martinfowler.com/bliki/GivenWhenThen.html
      템플릿 메소드 패턴(Template Method Pattern):
        link: https://johngrib.github.io/wiki/pattern/template-method/
  - F.I.R.S.T: 
    extract:
      - Fast: 테스트는 빨라야 한다.
      - Independent: 각 테스트는 서로 의존하면 안 된다.
      - Repeatable: 테스트는 어떤 환경에서도 반복 가능해야한다.
      - Self-Validating: 테스트는 부울 값으로 결과를 내야 한다.
      - Timely: 단위 테스트는 테스트하려는 실제 코드를 구현하기직전에 구현한다.
    comment: 묻지말고 알아서 잘 빨리 딱 떨어지게 작성전 제출 할것.
conclusion: |
  테스트 코드가 방치되어 망가지면 실제 코드도 망가진다. 테스트 코드를 깨끗하게 유지하자.